<?php

/**
 * @file
 * contentEditable fields module.
 */

function contenteditable_menu() {

  $items['contenteditable/ajax'] = array(
    'title' => t('contenteditable AJAX'),
    'type' => MENU_CALLBACK,
    'page callback' => 'contenteditable_ajax',
    'access arguments' => array('access content'),
  );

  return $items;
}

function contenteditable_ajax () {
  // Retrieve the slider value
  $field_value = $_POST['field_value'];
  $nid = (int)$_POST['nid'];
  $field_name = $_POST['fieldname'];
  $node = node_load($nid);
  $node->{$field_name} = array('und'=>array(array('value'=>$field_value)));
  node_save($node);
  // Return json
  $json_output = array();
  $json_output['nid'] = $nid;
  $json_output['fieldname'] = $field_name;
  $json_output['msg'] = t('Your changes were saved.');
  drupal_json_output($json_output);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function contenteditable_field_formatter_info() {
  return array(
    'contenteditable' => array(
      'label' => t('contentEditable'),
      'field types' => array('text','text_long','text_with_summary','list_text'),
      'settings' => array(
        'fallback_format' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function contenteditable_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];  
  $element = array();
  
  //fallback formatter
  // Get the list of formatters for this field type, and remove our own.
  $formatters = field_ui_formatter_options($field['type']);
  unset($formatters['contenteditable']); 
  $element['fallback_format'] = array(
    '#type' => 'select',
    '#title' => t('Fallback formatter'),
    '#options' => $formatters,
    '#default_value' => $settings['fallback_format'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function contenteditable_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $formatter_type = field_info_formatter_types($settings['fallback_format']);//get label of fallback formater for summary info
  $summary = t('Fallback format: @fallback_format format', array(
    '@fallback_format'     => $formatter_type['label'],
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}


/**
 * Format a field using the fallback formatter of the contenteditable field.
 */
function contenteditable_fallback_formatter($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Set the fallback formatter.
  $display['type'] = $display['settings']['fallback_format'];
  $formatter_type = field_info_formatter_types($display['type']);
  $display['module'] = $formatter_type['module'];

  // Clone the entity to avoid messing with it.
  $cloned_entity = clone $entity;

  return field_view_field($entity_type, $cloned_entity, $field['field_name'], $display, $langcode);
}

/**
 * Implements hook_field_formatter_view().
 */
function contenteditable_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // See if access to this form element is restricted,
  //if so, skip widget processing and just set the value.
  if (!entity_access('update', $entity_type, $entity) || !field_access('edit', $field, $entity_type, $entity)) {
    // Can't edit.
    return contenteditable_fallback_formatter($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  } 
  drupal_add_css(drupal_get_path('module', 'contenteditable') . '/contenteditable.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  drupal_add_library('system', 'effects.highlight');
  drupal_add_js(drupal_get_path('module', 'contenteditable') . '/contenteditable.js');
  _contenteditable_add_controls();
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array('#markup' => '<div contentEditable="true" data-nid="' . $entity->nid . '" data-fieldname="' . $field['field_name']. '">' . $item['value'] . '</div>');
  }

  return $element;
}

/**
 * Helper function to add the controls to Drupal.settings
 *
 * @TODO: Consider making this a hook.
 */
function _contenteditable_add_controls() {
  $settings = array(
    'contenteditable' => array(
      'bold' => array(
        'wrapper' => '<button>',
        'event' => 'click',
        'attributes' => array(
          'html' => '<strong>B</strong>',
          'data-command' => 'bold',
          'alt' => 'bold',
        ),
      ),
      'italic' => array(
        'wrapper' => '<button>',
        'event' => 'click',
        'attributes' => array(
          'html' => '<i>i</i>',
          'data-command' => 'italic',
          'alt' => 'italic',
        ),
      ),
      'underline' => array(
        'wrapper' => '<button>',
        'event' => 'click',
        'attributes' => array(
          'html' => '<u>u</u>',
          'data-command' => 'underline',
          'alt' => 'underline',
        ),
      ),
    ),
  );
  drupal_add_js($settings, 'setting');
}

